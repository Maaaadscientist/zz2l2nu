#include <TH1F.h>
#include <TH2F.h>
#include <THStack.h>
#include <TCanvas.h>
#include <TLegend.h>
#include <TRandom.h>
#include <TMath.h>
#include <math.h>
#include <vector>
#include <TFile.h>
#include <iostream>
#include "TROOT.h"
#include <TGaxis.h>
#include <TLine.h>
#include <algorithm> 
#include <map>

//You can tune easily the options here
#define VERBOSE true
#define HIDE_WARNING false
#define DEBUG_HISTOS true

void step1_weight_NVtx_vs_pt(TString base_path, TFile *f_HZZ) {
  if(VERBOSE) std::cout<< "Launching step1 of the computation of the weights for Instr. MET: NVtx vs Pt" << std::endl; 
  // Initialization: opening and creating ROOT files
  TString InstrMET_noWeight_path = base_path + "OUTPUTS/computeInstrMET_PhotonData_NoWeight/MERGED/"; // Path of photon data without any reweighting for Instr. MET

  TFile *f_InstrMET = TFile::Open(InstrMET_noWeight_path+"output_Data.root");
  TFile *f_output = new TFile(base_path+"WeightsAndDatadriven/InstrMET/InstrMET_weight_NVtx_vs_pt.root","RECREATE");

  // Main Loop of Step1
  std::vector<TString> jetCat = {"eq0jets","geq1jets","vbf"};
  std::vector<TString> lepCat = {"ee","mumu"};
  std::vector<TH2F*> InstrMET_zpt_vs_nvtx;
  std::vector<std::vector<TH1F*> > HZZ_nvtx(jetCat.size());
  std::vector<std::vector<TH2F*> > results(jetCat.size());
  double weight;

  for(unsigned int i = 0; i < jetCat.size(); i++){
    //Get histos
    InstrMET_zpt_vs_nvtx.push_back( (TH2F*) f_InstrMET->Get("zpt_vs_nvtx_InstrMET_reweighting_"+jetCat[i]+"__gamma"));
    if(InstrMET_zpt_vs_nvtx[i]->GetSumw2N() == 0) InstrMET_zpt_vs_nvtx[i]->Sumw2(kTRUE);
    for(unsigned int j = 0; j < lepCat.size(); j++){
      results[i].push_back( (TH2F*) InstrMET_zpt_vs_nvtx[i]->Clone("InstrMET_weight_zpt_vs_nvtx__"+jetCat[i]+"__"+lepCat[j]));
      HZZ_nvtx[i].push_back( (TH1F*) f_HZZ->Get("reco-vtx_InstrMET_reweighting__"+jetCat[i]+"__"+lepCat[j]));

      if(HZZ_nvtx[i][j]->GetSumw2N() == 0) HZZ_nvtx[i][j]->Sumw2(kTRUE);
      HZZ_nvtx[i][j]->Scale(1./HZZ_nvtx[i][j]->Integral());


      for(int pt_bin = 0; pt_bin <= results[i][0]->GetNbinsX(); pt_bin++){ //Starting at 1 and going at < (instead of <=) to avoid under- and over-flow bins.
        TH1D* temp_projection = InstrMET_zpt_vs_nvtx[i]->ProjectionY("zpt_vs_nvtx_InstrMET_reweighting_"+jetCat[i]+"__gamma_bin"+std::to_string(pt_bin), pt_bin, pt_bin);
        temp_projection->Scale(1./temp_projection->Integral());
        if(DEBUG_HISTOS) temp_projection->Write(); //Normalized and used to compute weights
        for(int nvtx_bin = 0; nvtx_bin <= results[i][0]->GetNbinsY(); nvtx_bin++){
          weight=0;
          if(InstrMET_zpt_vs_nvtx[i]->GetBinContent(pt_bin, nvtx_bin) > 0){
            weight=(1.0*HZZ_nvtx[i][j]->GetBinContent(nvtx_bin))/(1.0*temp_projection->GetBinContent(nvtx_bin));
            if(HZZ_nvtx[i][j]->GetBinContent(nvtx_bin) == 0) std::cout<< " --- /!\\ ERROR /!\\ --- \n The binning chosen for the Nvtx is given 0 value for Z+jets while it has a positive value for Photon+jets (here for bin " << nvtx_bin <<". Please change the binning!" << std::endl;
            }
          else{
            weight=0;
          }
          results[i][j]->SetBinContent(pt_bin, nvtx_bin, weight);
        }
      }
      if(DEBUG_HISTOS) HZZ_nvtx[i][j]->Write(); //Normalized and used to compute weights
      if(results[i][j]->GetSumw2N() == 0) results[i][j]->Sumw2(kTRUE);
      results[i][j]->Write();

    }
    if(DEBUG_HISTOS) InstrMET_zpt_vs_nvtx[i]->Write(); //Not normalized, just to see the raw distribution

  }
  if(VERBOSE) std::cout<< "Step1 of reweighting done. Weights are available under: InstrMET_weight_NVtx_vs_pt.root" << std::endl; 

}

void step2_weight_pt(TString base_path, TFile *f_HZZ) {
  if(VERBOSE) std::cout<< "Launching step2 of the computation of the weights for Instr. MET: Pt" << std::endl; 

  // Initialization: opening and creating ROOT files
  TString InstrMET_NVtxWeight_path = base_path + "OUTPUTS/computeInstrMET_PhotonData_NVtx_WeightApplied/MERGED/"; // Path of photon data already reweighted for the # of vertices

  TFile *f_InstrMET = TFile::Open(InstrMET_NVtxWeight_path+"output_Data.root");
  TFile *f_output = new TFile(base_path+"WeightsAndDatadriven/InstrMET/InstrMET_weight_pt.root","RECREATE");

  //HZZ_zpt.push_back( (TH1F*) f_HZZ->Get("pT_Z_InstrMET_reweighting__"+jetCat[i]+"__"+lepCat[j]));

}


void macroToComputeInstrMETWeights(int reweightingStep) {
  gROOT->SetBatch();
  if(HIDE_WARNING) gErrorIgnoreLevel=kError;

  //Define all paths
  TString base_path = std::string(getenv("CMSSW_BASE")) + "/src/shears/HZZ2l2nu/";
  TString HZZ_path = base_path + "OUTPUTS/computeInstrMET_DiLeptonData/MERGED/"; // The path of the DiLepton data used for reweighting

  //Open and create ROOT files
  TFile *f_HZZ = TFile::Open(HZZ_path+"output_Data.root");

  if(reweightingStep == 1) step1_weight_NVtx_vs_pt(base_path, f_HZZ);
  else if (reweightingStep == 2) step2_weight_pt(base_path, f_HZZ);
  else std::cout<< "You launched this macro without a correct reweighting step: "<< reweightingStep << std::endl;
}
